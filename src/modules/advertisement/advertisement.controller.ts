import {
  Controller,
  Get,
  Post,
  Body,
  Patch,
  Param,
  Delete,
  UseGuards,
  Request,
  Query,
  UseInterceptors,
  UploadedFiles,
  BadRequestException,
  HttpCode,
} from '@nestjs/common';
import { FilesInterceptor } from '@nestjs/platform-express';
import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';
import { AdvertisementService } from './advertisement.service';
import { CreateAdvertisementDto } from './dto/create-advertisement.dto';
import { UpdateAdvertisementDto } from './dto/update-advertisement.dto';
import { AdvertisementQueryDto } from './dto/advertisement-query.dto';
import { diskStorage } from 'multer';
import { extname } from 'path';
import { v4 as uuidv4 } from 'uuid';
// Import the needed types
import { Advertisement } from './models/advertisement.model';

@Controller('advertisements')
export class AdvertisementController {
  constructor(private readonly advertisementService: AdvertisementService,
    
  ) {}

  @UseGuards(JwtAuthGuard)
  @Post()
  create(@Request() req, @Body() createAdvertisementDto: CreateAdvertisementDto) {
    return this.advertisementService.create(req.user.id, createAdvertisementDto);
  }

  @Get()
  findAll(@Query() query: AdvertisementQueryDto): Promise<{ data: Advertisement[]; total: number; pages: number }> {
    return this.advertisementService.findAll(query);
  }

  @Get(':id')
  findOne(@Param('id') id: string) {
    return this.advertisementService.findOne(+id);
  }

  @UseGuards(JwtAuthGuard)
  @Patch(':id')
  update(
    @Request() req,
    @Param('id') id: string,
    @Body() updateAdvertisementDto: UpdateAdvertisementDto,
  ) {
    return this.advertisementService.update(req.user.id, +id, updateAdvertisementDto);
  }

  @UseGuards(JwtAuthGuard)
  @Delete(':id')
  remove(@Request() req, @Param('id') id: string) {
    return this.advertisementService.remove(req.user.id, +id);
  }

  @UseGuards(JwtAuthGuard)
  @Post(':id/bump')
  @HttpCode(200)
  bumpAdvertisement(@Request() req, @Param('id') id: string) {
    return this.advertisementService.bumpAdvertisement(req.user.id, +id);
  }

  @UseGuards(JwtAuthGuard)
  @Post(':id/toggle-like')
  @HttpCode(200)
  toggleLike(@Request() req, @Param('id') id: string) {
    return this.advertisementService.toggleLike(req.user.id, +id);
  }

  @UseGuards(JwtAuthGuard)
  @Get('user/liked')
  getUserLikedAds(@Request() req, @Query() query: AdvertisementQueryDto) {
    return this.advertisementService.getUserLikedAds(req.user.id, query);
  }

  @UseGuards(JwtAuthGuard)
  @Get('user/my')
  getUserAds(@Request() req, @Query() query: AdvertisementQueryDto) {
    return this.advertisementService.getUserAds(req.user.id, query);
  }

  @UseGuards(JwtAuthGuard)
  @Post(':id/mark-as-sold')
  @HttpCode(200)
  markAsSold(@Request() req, @Param('id') id: string) {
    return this.advertisementService.markAsSold(req.user.id, +id);
  }

  @Post(':id/phone-show')
  @HttpCode(200)
  incrementPhoneShowCount(@Param('id') id: string) {
    return this.advertisementService.incrementPhoneShowCount(+id);
  }

  @UseGuards(JwtAuthGuard)
  @Post('upload-images')
  @UseInterceptors(
    FilesInterceptor('images', 10, {
      storage: diskStorage({
        destination: './uploads/ads',
        filename: (req, file, cb) => {
          // Generate a unique name for the file
          const uniqueName = `${uuidv4()}${extname(file.originalname)}`;
          cb(null, uniqueName);
        },
      }),
      fileFilter: (req, file, cb) => {
        // Check if file is an image
        if (!file.mimetype.match(/\/(jpg|jpeg|png|gif)$/)) {
          return cb(new BadRequestException('Only image files are allowed!'), false);
        }
        cb(null, true);
      },
      limits: {
        fileSize: 5 * 1024 * 1024, // 5MB max size
      },
    }),
  )
  uploadImages(@UploadedFiles() files: Array<Express.Multer.File>) {
    if (!files || files.length === 0) {
      throw new BadRequestException('No files uploaded');
    }

    // Process uploaded images and return their URLs
    const baseUrl = process.env.API_URL || 'http://localhost:3000';

    return files.map((file, index) => ({
      imageUrl: `${baseUrl}/uploads/ads/${file.filename}`,
      imageThumbnailUrl: `${baseUrl}/uploads/ads/thumbnails/${file.filename}`, // Thumbnail would be generated by another process
      imageMediumUrl: `${baseUrl}/uploads/ads/medium/${file.filename}`,
      imageLargeUrl: `${baseUrl}/uploads/ads/${file.filename}`,
      width: null, // These would be populated by an image processing service
      height: null,
      sizeKb: Math.round(file.size / 1024),
      displayOrder: index,
      isMain: index === 0, // First image is main by default
    }));
  }
}